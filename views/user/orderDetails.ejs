<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Order Details</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <style>
      body {
        background-color: #f5f6fa;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
      }
      .sidebar {
        height: 100vh;
        width: 250px;
        position: fixed;
        background: #343a40;
        padding-top: 20px;
      }
      .sidebar a {
        padding: 15px;
        text-decoration: none;
        font-size: 18px;
        color: white;
        display: block;
      }
      .sidebar a:hover {
        background: #495057;
      }
      .content {
        margin-left: 260px;
        padding: 30px;
        min-height: 100vh;
        width: calc(100% - 260px);
      }
      .breadcrumb {
        background-color: #ffffff;
        border-radius: 8px;
        padding: 10px 15px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
      }
      .breadcrumb-item a {
        color: #007bff;
        text-decoration: none;
      }
      .breadcrumb-item a:hover {
        text-decoration: underline;
      }
      .breadcrumb-item.active {
        color: #6c757d;
      }
      .order-details {
        max-width: 1000px;
        margin: 0 auto;
      }
      .product-image {
        width: 100px;
        height: 100px;
        object-fit: cover;
      }
      .order-status {
        font-size: 1.1rem;
        font-weight: 600;
      }
      .order-summary {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 20px;
      }
      .summary-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
      }
      .summary-total {
        font-weight: bold;
        border-top: 1px solid #dee2e6;
        padding-top: 15px;
        margin-top: 10px;
      }
      .status-pending {
        background: #ffc107;
        color: white;
        padding: 5px 10px;
        border-radius: 10px;
      }
      .status-delivered {
        background: #28a745;
        color: white;
        padding: 5px 10px;
        border-radius: 10px;
      }
      .status-cancelled {
        background: #dc3545;
        color: white;
        padding: 5px 10px;
        border-radius: 10px;
      }
      .status-failed {
        background: #dc3545;
        color: white;
        padding: 5px 10px;
        border-radius: 10px;
      }
      .status-returned {
        background: #6c757d;
        color: white;
        padding: 5px 10px;
        border-radius: 10px;
      }
      .status-return-request {
        background: #17a2b8;
        color: white;
        padding: 5px 10px;
        border-radius: 10px;
      }
      @media (max-width: 768px) {
        .sidebar {
          width: 200px;
        }
        .content {
          margin-left: 200px;
          width: calc(100% - 200px);
        }
      }
      @media (max-width: 576px) {
        .sidebar {
          width: 100%;
          height: auto;
          position: relative;
          box-shadow: none;
        }
        .content {
          margin-left: 0;
          width: 100%;
          padding: 15px;
        }
      }
    </style>
  </head>
  <body>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <div class="d-flex">
      <div class="sidebar">
        <h4 class="text-center text-white">User Dashboard</h4>
        <a href="/account">Account</a>
        <a href="/address-management">Address</a>
        <a href="/orders">Orders</a>
        <a href="/cart">Cart</a>
        <a href="/wallet">Wallet</a>
        <a href="/wishlist">Wishlist</a>
      </div>

      <div class="content">
        <div class="container my-5">
          <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
              <li class="breadcrumb-item"><a href="/">Home</a></li>
              <li class="breadcrumb-item active" aria-current="page">
                Order Details
              </li>
            </ol>
          </nav>

          <div class="order-details">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <h2>Order Details</h2>
              <span class="order-id">#<%= orders[0].orderId %></span>
            </div>

            <div class="card mb-4">
              <div class="card-body">
                <div class="row">
                  <div class="col-md-6">
                    <h5>Order Status</h5>
                    <p>Order Date: <%= orders[0].createdOn.toDateString() %></p>
                    <p>Payment Method: <%= orders[0].paymentMethod %></p>
                    <p>Order Status: <%= orders[0].status %></p>
                    <% if (orders[0].paymentStatus === 'Failed') { %>
                    <button
                      class="btn btn-primary"
                      onclick="retryPayment('<%= orders[0]._id %>', '<%= orders[0].finalAmount %>')"
                    >
                      Retry Payment
                    </button>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>

            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Shipping Address</h5>
              </div>
              <div class="card-body">
                <p><%= orders[0].address.name %></p>
                <p><%= orders[0].address.phone %></p>
                <p><%= orders[0].address.city %></p>
                <p><%= orders[0].address.landMark %></p>
                <p><%= orders[0].address.state %></p>
                <p><%= orders[0].address.pincode %></p>
              </div>
            </div>
            <input type="hidden" value="<%= orders[0]._id %>" id="orderId" />

            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Order Items</h5>
              </div>
              <div class="card-body p-0">
                <div class="table-responsive">
                  <table class="table table-borderless mb-0">
                    <thead class="bg-light">
                      <tr>
                        <th scope="col">Product</th>
                        <th scope="col">Details</th>
                        <th scope="col" class="text-center">Quantity</th>
                        <th scope="col" class="text-end">Price</th>
                        <th scope="col" class="text-end">Total</th>
                        <th>Action</th>
                        <th>Status</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% if (orders && orders.length > 0 &&
                      orders[0].orderedItems && orders[0].orderedItems.length >
                      0) { %> <% orders[0].orderedItems.forEach(item => { %>
                      <tr>
                        <td>
                          <img
                            src="/uploads/re-image/<%= item.product.productImage[0] %>"
                            alt=""
                            class="product-image"
                          />
                        </td>
                        <td>
                          <h6 class="mb-0"><%= item.product.productName %></h6>
                        </td>
                        <td class="text-center"><%= item.quantity %></td>
                        <td class="text-end">₹ <%= item.price %></td>
                        <td class="text-end">
                          ₹ <%= item.price * item.quantity %>
                        </td>
                        <td>
                          <% if (item.status && item.status.toLowerCase() ===
                          'delivered') { %>
                          <button
                            class="btn btn-warning returnOrder"
                            data-product-id="<%= item.product._id %>"
                            data-order-id="<%= orders[0]._id %>"
                          >
                            Return
                          </button>
                          <div
                            class="return-form"
                            id="return-form-<%= item.product._id %>"
                            style="display: none"
                          >
                            <textarea
                              class="form-control returnReason"
                              placeholder="Enter return reason"
                              required
                            ></textarea>
                            <button
                              class="btn btn-primary submitReturn"
                              data-product-id="<%= item.product._id %>"
                              data-order-id="<%= orders[0]._id %>"
                            >
                              Submit
                            </button>
                          </div>
                          <% } else if (item.status && item.status.toLowerCase()
                          === 'return request') { %>
                          <span class="text-primary"
                            >Return Request Processing</span
                          >
                          <% } else if (item.status && item.status.toLowerCase()
                          === 'returned') { %>
                          <span class="text-success">Returned</span>
                          <% } else if (item.status && item.status.toLowerCase()
                          === 'cancelled') { %>
                          <span class="text-danger">Cancelled</span>
                          <% } else if (orders[0].status !== 'Failed') { %>
                          <button
                            class="btn btn-danger cancelOrder"
                            data-product-id="<%= item.product._id %>"
                            data-order-id="<%= orders[0]._id %>"
                          >
                            Cancel
                          </button>
                          <% } %>
                        </td>
                        <td>
                          <span
                            class="status-badge status-<%= item.status ? item.status.toLowerCase().replace(' ', '-') : 'pending' %>"
                          >
                            <%= item.status || 'Pending' %>
                          </span>
                        </td>
                      </tr>
                      <% }) %> <% } else { %>
                      <tr>
                        <td colspan="7" class="text-center">
                          No order items found.
                        </td>
                      </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6 ms-auto">
                <div class="order-summary">
                  <h5 class="mb-3">Order Summary</h5>
                  <div class="summary-item">
                    <span>Subtotal</span>
                    <span>₹ <%= orders[0].totalPrice %></span>
                  </div>
                  <div class="summary-item">
                    <span>Shipping</span>
                    <span>free</span>
                  </div>
                  <div class="summary-item">
                    <span>Discount</span>
                    <span
                      >₹ <%= orders[0].totalPrice - orders[0].finalAmount
                      %></span
                    >
                  </div>
                  <div class="summary-item summary-total">
                    <span>Total</span>
                    <span>₹ <%= orders[0].finalAmount %></span>
                  </div>
                  <div class="mt-3 text-end">
                    <% if (orders[0].status !== 'Cancelled' && orders[0].status
                    !== 'Failed') { %>
                    <a
                      href="/download-invoice/<%= orders[0]._id %>"
                      class="btn btn-outline-secondary"
                      >Download Invoice</a
                    >
                    <% } %>
                  </div>
                </div>
              </div>
            </div>

            <div class="mt-4">
              <a href="/orders" class="btn btn-outline-primary"
                >Back to Orders</a
              >
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("click", async (event) => {
        if (event.target.classList.contains("cancelOrder")) {
          const productId = event.target.dataset.productId;
          const orderId = event.target.dataset.orderId;

          const { value: reason } = await Swal.fire({
            title: "Cancel Order",
            text: "Are you sure you want to cancel this order? Please select a reason:",
            input: "select",
            inputOptions: {
              "Changed my mind": "Changed my mind",
              "Ordered by mistake": "Ordered by mistake",
              "Found a better price elsewhere":
                "Found a better price elsewhere",
              "Item no longer needed": "Item no longer needed",
              Other: "Other",
            },
            inputPlaceholder: "Select a reason",
            showCancelButton: true,
            confirmButtonText: "Yes, Cancel",
            cancelButtonText: "No",
            inputValidator: (value) => {
              if (!value) {
                return "You must select a reason!";
              }
            },
          });

          if (!reason) return;

          try {
            const response = await fetch("/cancelOrder", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                orderId,
                productId,
                cancelReason: reason,
              }),
            });

            const data = await response.json();

            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Success",
                text: data.message,
              }).then(() => {
                location.reload();
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Failed to cancel order.",
              });
            }
          } catch (error) {
            console.error("Error cancelling order:", error);
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Something went wrong. Please try again.",
            });
          }
        }
      });

      document.addEventListener("click", (event) => {
        if (event.target.classList.contains("returnOrder")) {
          const productId = event.target.dataset.productId;
          document.getElementById(`return-form-${productId}`).style.display =
            "block";
        }
      });

      document.addEventListener("click", async (event) => {
        if (event.target.classList.contains("submitReturn")) {
          const productId = event.target.dataset.productId;
          const orderId = event.target.dataset.orderId;
          const reasonInput = document.querySelector(
            `#return-form-${productId} .returnReason`
          );
          const reason = reasonInput.value.trim();

          if (!reason) {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Please enter a reason for return.",
            });
            return;
          }

          try {
            const response = await fetch("/returnOrder", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                orderId,
                productId,
                returnReason: reason,
              }),
            });

            const data = await response.json();

            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Success",
                text: "Return request submitted successfully!",
              }).then(() => {
                location.reload();
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Failed to process return.",
              });
            }
          } catch (error) {
            console.error("Error processing return:", error);
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Something went wrong. Please try again.",
            });
          }
        }
      });

      async function retryPayment(orderId, finalAmount) {
        console.log("Order ID and Final Amount:", orderId, finalAmount);

        try {
          // Create a new Razorpay order for the retry payment
          const razorpayResponse = await fetch(
            "/create-razorpay-retry-payment",
            {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ amount: finalAmount, orderId }),
            }
          );
          const razorpayData = await razorpayResponse.json();
          if (!razorpayData.success) {
            Swal.fire(
              "Error",
              razorpayData.message || "Failed to initiate payment.",
              "error"
            );
            return;
          }

          const options = {
            key: "<%= process.env.RAZORPAY_KEY_ID %>",
            amount: finalAmount * 100, // Convert to paise
            currency: "INR",
            order_id: razorpayData.orderId,
            name: "Aura Candles",
            description: "Retry Order Payment",
            handler: async function (response) {
              try {
                // Update payment and order status
                const paymentResponse = await fetch("/order-payment-status", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    paymentStatus: "Success",
                    orderId,
                    paymentId: response.razorpay_payment_id, // Include paymentId
                  }),
                });
                const paymentData = await paymentResponse.json();
                if (paymentData.success) {
                  Swal.fire("Success", "Payment Successful", "success").then(
                    () => {
                      window.location.href = `/order-placed?orderId=${orderId}`;
                    }
                  );
                } else {
                  Swal.fire(
                    "Error",
                    paymentData.message || "Failed to update payment status",
                    "error"
                  );
                }
              } catch (error) {
                console.error("Payment status update error:", error);
                Swal.fire(
                  "Error",
                  "Network error during payment update",
                  "error"
                );
              }
            },
            prefill: {
              name: "",
              email: "",
              contact: "",
            },
            theme: {
              color: "#3399cc",
            },
            modal: {
              ondismiss: async function () {
                console.log("Payment cancelled by user");
                Swal.fire("Info", "Payment was cancelled", "info");
              },
            },
          };

          const rzp1 = new Razorpay(options);
          rzp1.on("payment.failed", async function (response) {
            try {
              // Update order status to Failed
              const paymentResponse = await fetch("/order-payment-status", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  paymentStatus: "Failed",
                  orderId,
                  paymentId: response.error.metadata.payment_id,
                }),
              });
              const paymentData = await paymentResponse.json();
              if (paymentData.success) {
                Swal.fire("Error", "Payment failed", "error").then(() => {
                  window.location.href = `/order-failure?orderId=${orderId}&reason=${encodeURIComponent(
                    "Payment failed: " + response.error.description
                  )}`;
                });
              } else {
                Swal.fire(
                  "Error",
                  paymentData.message || "Failed to update payment status",
                  "error"
                );
              }
            } catch (error) {
              console.error("Failed payment status update error:", error);
              Swal.fire(
                "Error",
                "Failed to update order after payment failure",
                "error"
              );
            }
          });
          rzp1.open();
        } catch (error) {
          console.error("Razorpay order creation error:", error);
          Swal.fire("Error", "Failed to initiate payment.", "error");
        }
      }
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
