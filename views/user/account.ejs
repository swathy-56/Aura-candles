<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        body {
            background-color: #f8f9fa;
        }
        .sidebar {
            height: 100vh;
            width: 250px;
            position: fixed;
            background: #343a40;
            padding-top: 20px;
        }
        .sidebar a {
            padding: 15px;
            text-decoration: none;
            font-size: 18px;
            color: white;
            display: block;
        }
        .sidebar a:hover {
            background: #495057;
        }
        .content {
            margin-left: 260px;
            padding: 20px;
        }
        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #007bff;
            background: #e9ecef;
            transition: opacity 0.3s ease;
        }
        .profile-img.loading {
            opacity: 0.5;
        }
        .edit-container {
            display: none;
            gap: 20px;
            flex-wrap: wrap;
        }
        .edit-box {
            flex: 1;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .view-mode {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        /* Breadcrumb Styling */
        .breadcrumb {
            background-color: #ffffff;
            border-radius: 8px;
            padding: 10px 15px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .breadcrumb-item a {
            color: #007bff;
            text-decoration: none;
        }
        .breadcrumb-item a:hover {
            text-decoration: underline;
        }
        .breadcrumb-item.active {
            color: #6c757d;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <h4 class="text-center text-white">User Dashboard</h4>
        <a href="/account">Account</a>
        <a href="/address-management">Address</a>
        <a href="/orders">Orders</a>
        <a href="/cart">Cart</a>
        <a href="/wallet">Wallet</a>
        <a href="/wishlist">Wishlist</a>
        
    </div>

    <!-- Main Content -->
    <div class="content">
        <h2>Welcome, <%= user.name %>!</h2>

        <!-- Breadcrumb Navigation -->
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item active" aria-current="page">Account</li>
            </ol>
        </nav>

        <!-- View Mode (Default Display) -->
        <div id="viewMode" class="view-mode">
            <div class="text-center mb-4">
                <img id="profileImageView" 
                     src="<%= user.profileImage || '/uploads/default-profile.png' %>" 
                     alt="Profile Image" 
                     class="profile-img loading" 
                     onload="this.classList.remove('loading')" 
                     onerror="this.onerror=null; this.src='/uploads/default-profile.png'; this.classList.remove('loading')">
                <h4 class="mt-3"><%= user.name %></h4>
                <p class="text-muted"><%= user.email %></p>
                <p class="text-muted"><%= user.phone || 'Not provided' %></p>
            </div>
            <button id="editBtn" class="btn btn-primary">Edit Profile</button>
        </div>

        <!-- Edit Mode (Hidden by Default) -->
        <div id="editMode" class="edit-container">
            <!-- Profile Image + Name + Phone Edit Form -->
            <div class="edit-box">
                <form id="editProfileForm" enctype="multipart/form-data">
                    <div class="text-center">
                        <img id="profilePreview" 
                             src="<%= user.profileImage || '/uploads/default-profile.png' %>" 
                             alt="Profile Image" 
                             class="profile-img">
                        <input type="file" class="form-control mt-2" name="profileImage" accept="image/*" onchange="previewImage(event)">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Name:</label>
                        <input type="text" class="form-control" name="name" value="<%= user.name %>" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone:</label>
                        <input type="text" class="form-control" name="phone" value="<%= user.phone || '' %>">
                    </div>
                    <button type="submit" class="btn btn-success w-100">Save Changes</button>
                    <button id="cancelBtn" type="button" class="btn btn-secondary w-100 mt-2">Cancel</button>
                </form>
            </div>

            <!-- Change Email Form -->
            <div class="edit-box">
                <h4>Change Email</h4>
                <form id="emailChangeForm">
                    <div class="mb-3">
                        <label class="form-label">Enter new email:</label>
                        <input type="email" class="form-control" id="newEmail" required>
                    </div>
                    <button class="btn btn-primary w-100" type="button" id="sendOtpBtn">Send OTP</button>
                    <div id="otpSection" style="display: none; margin-top: 10px;">
                        <label class="form-label">Enter OTP:</label>
                        <input type="text" class="form-control" id="otp" required>
                        <div id="timerDisplay" class="mt-2 text-muted">Time remaining: <span id="timer">5:00</span></div>
                        <button class="btn btn-success w-100 mt-2" type="button" id="verifyOtpBtn">Verify OTP</button>
                        <button class="btn btn-secondary w-100 mt-2" type="button" id="resendOtpBtn" style="display: none;">Resend OTP</button>
                    </div>
                    <p id="emailMessage" class="mt-2"></p>
                </form>
            </div>
            <!-- Change Password Form -->
            <div class="edit-box">
                <h4>Change Password</h4>
                <form id="changePasswordForm">
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" id="newPassword" name="newPassword" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
                    </div>
                    <button type="submit" class="btn btn-success w-100">Change Password</button>
                </form>
                <p id="passwordMessage" class="mt-2"></p>
            </div>
        </div>
    </div>

    <script>
        let countdownTimer;
        let timeLeft = 300;
        // Pass EJS variables to JavaScript
        const successMessage = '<%= typeof success !== "undefined" && success ? success : "" %>';
        const errorMessage = '<%= typeof error !== "undefined" && error ? error : "" %>';

        // Display SweetAlert2 for Success/Error Messages on Page Load
        document.addEventListener('DOMContentLoaded', () => {
            if (successMessage) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: successMessage,
                    confirmButtonColor: '#3085d6'
                });
            }
            if (errorMessage) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage,
                    confirmButtonColor: '#d33'
                });
            }
        });

        // Preview Image Function
        function previewImage(event) {
            const reader = new FileReader();
            reader.onload = function () {
                document.getElementById('profilePreview').src = reader.result;
            };
            reader.readAsDataURL(event.target.files[0]);
        }

        // Toggle Edit Mode
        document.getElementById('editBtn').addEventListener('click', () => {
            document.getElementById('viewMode').style.display = 'none';
            document.getElementById('editMode').style.display = 'flex';
        });

        document.getElementById('cancelBtn').addEventListener('click', () => {
            document.getElementById('viewMode').style.display = 'block';
            document.getElementById('editMode').style.display = 'none';
        });

        // Handle Profile Update Form Submission with AJAX
document.getElementById('editProfileForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(document.getElementById('editProfileForm'));
    try {
        const response = await fetch('/updateProfile', {
            method: 'PATCH', // Changed to PATCH
            body: formData,
        });
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Profile updated successfully!',
                confirmButtonColor: '#3085d6'
            }).then(() => {
                document.getElementById('profileImageView').src = data.profileImage || '/uploads/default-profile.png';
                document.querySelector('#viewMode h4').textContent = data.name;
                document.querySelector('#viewMode .text-muted:nth-child(2)').textContent = data.email || '';
                document.querySelector('#viewMode .text-muted:nth-child(3)').textContent = data.phone || 'Not provided';
                document.getElementById('viewMode').style.display = 'block';
                document.getElementById('editMode').style.display = 'none';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Error updating profile: ' + data.message,
                confirmButtonColor: '#d33'
            });
        }
    } catch (error) {
        console.error('Error updating profile:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'An error occurred while updating the profile. Please try again.',
            confirmButtonColor: '#d33'
        });
    }
});
        function startTimer() {
    clearInterval(countdownTimer);
    timeLeft = 300;
    const timerElement = document.getElementById('timer');
    
    countdownTimer = setInterval(() => {
        if (timeLeft <= 0) {
            clearInterval(countdownTimer);
            document.getElementById('resendOtpBtn').style.display = 'block';
            timerElement.textContent = '0:00';
            document.getElementById('verifyOtpBtn').disabled = true;
        } else {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        }
    }, 1000);
}

// Modify the sendOtpBtn event listener
document.getElementById('sendOtpBtn').addEventListener('click', async () => {
    const newEmail = document.getElementById('newEmail').value.trim().toLowerCase();
    const messageElement = document.getElementById('emailMessage');
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
    if (!newEmail) {
        messageElement.textContent = "Please enter an email.";
        messageElement.style.color = "red";
        return;
    } else if (!emailRegex.test(newEmail)) {
        messageElement.textContent = "Invalid email format.";
        messageElement.style.color = "red";
        return;
    }
    
    try {
        const response = await fetch('/changeEmail', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ newEmail })
        });
        const data = await response.json();
        messageElement.textContent = data.message;
        messageElement.style.color = data.success ? "green" : "red";
        if (data.success) {
            document.getElementById('otpSection').style.display = 'block';
            document.getElementById('resendOtpBtn').style.display = 'none';
            document.getElementById('verifyOtpBtn').disabled = false;
            startTimer();
        }
    } catch (error) {
        console.error('Error sending OTP:', error);
        messageElement.textContent = "An error occurred. Please try again.";
        messageElement.style.color = "red";
    }
});

// Add resend OTP functionality
document.getElementById('resendOtpBtn').addEventListener('click', async () => {
    const newEmail = document.getElementById('newEmail').value.trim().toLowerCase();
    const messageElement = document.getElementById('emailMessage');
    
    try {
        const response = await fetch('/resendEmailOtp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ newEmail })
        });
        const data = await response.json();
        messageElement.textContent = data.message;
        messageElement.style.color = data.success ? "green" : "red";
        if (data.success) {
            document.getElementById('resendOtpBtn').style.display = 'none';
            document.getElementById('verifyOtpBtn').disabled = false;
            startTimer();
        }
    } catch (error) {
        console.error('Error resending OTP:', error);
        messageElement.textContent = "An error occurred. Please try again.";
        messageElement.style.color = "red";
    }
});

// Modify verifyOtpBtn event listener
document.getElementById('verifyOtpBtn').addEventListener('click', async () => {
    const otp = document.getElementById('otp').value;
    const messageElement = document.getElementById('emailMessage');
    try {
        const response = await fetch('/verifyEmailOtp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ otp })
        });
        const data = await response.json();
        messageElement.textContent = data.message;
        messageElement.style.color = data.success ? "green" : "red";
        if (data.success) {
            clearInterval(countdownTimer);
            setTimeout(() => window.location.reload(), 2000);
        }
    } catch (error) {
        console.error('Error verifying OTP:', error);
        messageElement.textContent = "An error occurred. Please try again.";
        messageElement.style.color = "red";
    }
});
        // Change Password
document.getElementById('changePasswordForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const currentPassword = document.getElementById('currentPassword').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    const messageElement = document.getElementById('passwordMessage');
    if (newPassword !== confirmPassword) {
        messageElement.textContent = "New passwords do not match.";
        messageElement.style.color = "red";
        return;
    }
    try {
        const response = await fetch('/change-password', {
            method: 'PATCH', // Changed to PATCH
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ currentPassword, newPassword, confirmPassword })
        });
        const data = await response.json();
        messageElement.textContent = data.message;
        messageElement.style.color = data.success ? "green" : "red";
        if (data.success) {
            setTimeout(() => window.location.reload(), 2000);
        }
    } catch (error) {
        console.error('Error changing password:', error);
        messageElement.textContent = "An error occurred. Please try again.";
        messageElement.style.color = "red";
    }
});
        // Debug Image Source
        console.log('Profile Image Source:', '<%= user.profileImage || "default" %>');
    </script>
</body>
</html>