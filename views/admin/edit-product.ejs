<%- include("../../views/partials/admin/header") %>

<head>
    <style>
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }
        .thumbnail {
            margin-right: 10px;
            position: relative;
        }
        .input-upload {
            position: relative;
        }
        .delete-icon {
            color: red;
            font-size: 16px;
        }
        .edit-icon {
            color: blue;
            font-size: 16px;
            cursor: pointer;
            margin-left: 5px;
        }
        .error-message {
            color: red;
            font-size: 0.9em;
            margin-top: 5px;
            display: none;
        }
        .image-cropper {
            display: none;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            background: #fff;
            padding: 10px;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .cropper-wrapper {
            max-width: 400px;
            width: 100%;
        }
        .cropper-image {
            max-width: 100%;
            display: block;
        }
        .cropper-controls {
            display: flex;
            gap: 10px;
        }
        .add-image-container {
            margin-top: 20px;
        }
        /* Toast Styling */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
        .toast {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 4px;
            max-width: 300px;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }
        .toast.show {
            opacity: 1;
        }
        .toast .toast-close {
            cursor: pointer;
            float: right;
            font-weight: bold;
            margin-left: 10px;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
</head>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <!-- Toast Container -->
                    <div class="toast-container" id="toastContainer"></div>
                    <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data"
                        onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%=product.productName%>"
                                class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand">
                                <% for (let i = 0; i < brand.length; i++) { %>
                                    <option value="<%= brand[i].brandName %>" 
                                        <%= product.brand === brand[i].brandName ? 'selected' : '' %>>
                                        <%= brand[i].brandName %>
                                    </option>
                                <% } %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <input name="descriptionData" value="<%=product.description%>"
                                class="form-control border" rows="4">
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="â‚¹" name="regularPrice" type="text"
                                        value="<%=product.regularPrice%>" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="text" value="<%=product.quantity%>"
                                        class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Size</label>
                                    <input name="size" type="text" value="<%=product.size%>"
                                        class="form-control border">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                            <% for(let i=0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>" <%= product.category.toString() === cat[i]._id.toString() ? 'selected' : '' %>>
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <div class="thumbnails-container">
                                    <% if (product.productImage && product.productImage.length > 0) { %>
                                        <% for(let i=0; i < product.productImage.length; i++) { %>
                                            <div class="thumbnail">
                                                <input type="hidden" value="<%= product.productImage[i] %>" name="existingImages[]">
                                                <img class="rounded" style="width: 300px; height: 400px;"
                                                    src="/uploads/re-image/<%= product.productImage[i] %>" alt="Product Image"
                                                    id="imgView<%= i %>">
                                                <div style="position: absolute; top: 10px; right: 10px;">
                                                    <i onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>')"
                                                        class="fa-solid fa-x delete-icon" style="cursor: pointer;"></i>
                                                    <i onclick="triggerImageEdit(<%= i %>)" class="fa-solid fa-edit edit-icon"></i>
                                                </div>
                                                <input type="file" name="images" id="input<%= i %>" accept="image/png,image/jpeg,image/jpg"
                                                    style="display: none;" onchange="viewImage(event, <%= i %>)">
                                                <div class="image-cropper" id="cropper<%= i %>">
                                                    <div class="cropper-wrapper">
                                                        <img src="" id="cropperImg<%= i %>" class="cropper-image" alt="Cropper">
                                                    </div>
                                                    <div class="cropper-controls">
                                                        <button type="button" id="saveButton<%= i %>" class="btn btn-sm btn-primary">Save Crop</button>
                                                        <button type="button" id="cancelButton<%= i %>" class="btn btn-sm btn-secondary">Cancel</button>
                                                    </div>
                                                </div>
                                            </div>
                                        <% } %>
                                    <% } %>
                                </div>
                                <div id="newImagesContainer">
                                    <% if (!product.productImage || product.productImage.length === 0) { %>
                                        <div class="add-image-container" id="newImage0">
                                            <label class="form-label">Add New Image</label>
                                            <input class="form-control" type="file" name="images" id="inputNew0"
                                                accept="image/png,image/jpeg,image/jpg" onchange="viewImage(event, 'New0')">
                                            <img src="" alt="" id="imgViewNew0" style="width: 300px; height: 400px; display: none; margin-top: 10px;">
                                            <div class="image-cropper" id="cropperNew0">
                                                <div class="cropper-wrapper">
                                                    <img src="" id="cropperImgNew0" class="cropper-image" alt="Cropper">
                                                </div>
                                                <div class="cropper-controls">
                                                    <button type="button" id="saveButtonNew0" class="btn btn-sm btn-primary">Save Crop</button>
                                                    <button type="button" id="cancelButtonNew0" class="btn btn-sm btn-secondary">Cancel</button>
                                                </div>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                                <% if (!product.productImage || product.productImage.length < 4) { %>
                                    <div class="add-image-container">
                                        <button type="button" class="btn btn-sm btn-secondary" id="addImageButton" onclick="addNewImageInput()">Add Another Image</button>
                                    </div>
                                <% } %>
                                <div id="images-error" class="error-message"></div>
                            </div>
                        </div>
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" id="updatebtn" type="submit">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js" integrity="sha512-JyCZjCOZoyeQZSd5+YEAcFgz2fowJ1F1hyJOXgtKu4llIa0KneLcidn5bwfutiehUTiOuK87A986BZJMko0eWQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
    let newImageCounter = <%= product.productImage && product.productImage.length > 0 ? 0 : 1 %>;
    const maxImages = 4;
    let croppers = {};

    // Function to show toast notification
    function showToast(message) {
        const toastContainer = document.getElementById('toastContainer');
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.innerHTML = `
            ${message}
            <span class="toast-close">Ã—</span>
        `;
        toastContainer.appendChild(toast);

        // Show toast
        setTimeout(() => {
            toast.classList.add('show');
        }, 100);

        // Auto-hide toast after 3 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                toast.remove();
            }, 300);
        }, 3000);

        // Allow manual close
        toast.querySelector('.toast-close').addEventListener('click', () => {
            toast.classList.remove('show');
            setTimeout(() => {
                toast.remove();
            }, 300);
        });
    }

    // Validate image file type
    function validateImageType(file) {
        const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg'];
        return file && validImageTypes.includes(file.type);
    }

    function validateForm() {
        clearErrorMessages();
        const name = document.getElementsByName('productName')[0].value;
        const description = document.getElementsByName('descriptionData')[0].value;
        const brand = document.getElementsByName('brand')[0].value;
        const price = document.getElementsByName('regularPrice')[0].value;
        const size = document.getElementsByName('size')[0].value;
        const category = document.getElementsByName('category')[0].value;
        const quantity = document.getElementsByName('quantity')[0].value;
        const images = document.querySelectorAll('input[name="images"]');
        const existingImages = document.querySelectorAll('input[name="existingImages[]"]');

        let isValid = true;

        if (name.trim() === "") {
            displayErrorMessage('productName-error', 'Please enter a product name.');
            isValid = false;
        }
        if (description === '') {
            displayErrorMessage('description-error', 'Please enter a product description.');
            isValid = false;
        }
        if (parseInt(quantity) < 0) {
            displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
            isValid = false;
        }
        if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }
        if (size.trim() === "") {
            displayErrorMessage('color-error', 'Please enter a size.');
            isValid = false;
        }
        if (existingImages.length === 0 && !Array.from(images).some(input => input.files.length > 0)) {
            displayErrorMessage("images-error", 'Please select at least one image.');
            isValid = false;
        }

        // Validate image file types
        images.forEach((input, index) => {
            if (input.files.length > 0 && !validateImageType(input.files[0])) {
                displayErrorMessage('images-error', `Image ${index + 1} must be a valid image file (jpg, png, jpeg).`);
                isValid = false;
            }
        });

        return isValid;
    }

    function displayErrorMessage(elementId, message) {
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
            element.style.display = 'none';
        });
    }

    function triggerImageEdit(index) {
        document.getElementById(`input${index}`).click();
    }

    function addNewImageInput() {
        const existingImages = document.querySelectorAll('input[name="existingImages[]"]').length;
        const newImages = document.querySelectorAll('#newImagesContainer .add-image-container').length;
        const totalImages = existingImages + newImages;

        if (totalImages >= maxImages) {
            showToast('You can only add up to 4 images.');
            document.getElementById('addImageButton').style.display = 'none';
            return;
        }

        const container = document.getElementById('newImagesContainer');
        const newInputDiv = document.createElement('div');
        newInputDiv.className = 'add-image-container';
        newInputDiv.id = `newImage${newImageCounter}`;
        newInputDiv.innerHTML = `
            <label class="form-label">Add New Image</label>
            <input class="form-control" type="file" name="images" id="inputNew${newImageCounter}"
                accept="image/png,image/jpeg,image/jpg" onchange="viewImage(event, 'New${newImageCounter}')">
            <img src="" alt="" id="imgViewNew${newImageCounter}" style="width: 300px; height: 400px; display: none; margin-top: 10px;">
            <div class="image-cropper" id="cropperNew${newImageCounter}">
                <div class="cropper-wrapper">
                    <img src="" id="cropperImgNew${newImageCounter}" class="cropper-image" alt="Cropper">
                </div>
                <div class="cropper-controls">
                    <button type="button" id="saveButtonNew${newImageCounter}" class="btn btn-sm btn-primary">Save Crop</button>
                    <button type="button" id="cancelButtonNew${newImageCounter}" class="btn btn-sm btn-secondary">Cancel</button>
                </div>
            </div>
        `;
        container.appendChild(newInputDiv);
        newImageCounter++;

        if (totalImages + 1 >= maxImages) {
            document.getElementById('addImageButton').style.display = 'none';
        }
    }

    function viewImage(event, index) {
        const input = event.target;
        const file = input.files[0];
        if (!file) return;

        // Validate file type
        if (!validateImageType(file)) {
            Swal.fire('Error', 'Please select a valid image file (jpg, png, jpeg)', 'error');
            input.value = ''; // Clear the invalid file
            document.getElementById(`imgView${index}`).src = ''; // Clear preview
            document.getElementById(`imgView${index}`).style.display = 'none';
            return;
        }

        const reader = new FileReader();
        reader.onload = function () {
            const dataURL = reader.result;

            // Update preview image
            const previewImage = document.getElementById(`imgView${index}`);
            if (previewImage) {
                previewImage.src = dataURL;
                previewImage.style.display = "block";
            }

            // Initialize Cropper.js
            const cropperImage = document.getElementById(`cropperImg${index}`);
            if (cropperImage) {
                cropperImage.src = dataURL;
            }

            // Destroy existing cropper if any
            if (croppers[index]) {
                croppers[index].destroy();
            }

            try {
                croppers[index] = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true,
                    ready: function () {
                        // Show cropper container
                        const cropperContainer = document.getElementById(`cropper${index}`);
                        if (cropperContainer) {
                            cropperContainer.style.display = "flex";
                        }
                    }
                });
            } catch (error) {
                console.error('Error initializing Cropper.js:', error);
                Swal.fire('Error', 'Failed to initialize image cropper. Please try again.', 'error');
                input.value = '';
                previewImage.src = '';
                previewImage.style.display = 'none';
                return;
            }

            // Save cropped image
            document.getElementById(`saveButton${index}`).onclick = function () {
                if (!croppers[index]) return;
                const croppedCanvas = croppers[index].getCroppedCanvas({ width: 440, height: 440 });
                if (!croppedCanvas) {
                    Swal.fire('Error', 'Failed to crop the image. Please try again.', 'error');
                    return;
                }

                // Update preview with cropped image
                previewImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

                // Create a new file for the cropped image
                const timestamp = new Date().getTime();
                const fileName = `cropped-img-${timestamp}-${index}.jpg`;
                croppedCanvas.toBlob(blob => {
                    const imgFile = new File([blob], fileName, { type: "image/jpeg" });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(imgFile);
                    input.files = dataTransfer.files;

                    // Hide cropper and clean up
                    const cropperContainer = document.getElementById(`cropper${index}`);
                    cropperContainer.style.display = "none";
                    croppers[index].destroy();
                    delete croppers[index];

                    showToast('Image cropped and saved successfully.');
                }, "image/jpeg", 1.0);
            };

            // Cancel cropping
            document.getElementById(`cancelButton${index}`).onclick = function () {
                const cropperContainer = document.getElementById(`cropper${index}`);
                cropperContainer.style.display = "none";
                input.value = '';
                previewImage.src = '';
                previewImage.style.display = 'none';
                if (croppers[index]) {
                    croppers[index].destroy();
                    delete croppers[index];
                }
            };
        };

        reader.readAsDataURL(file);
    }

    function deleteSingleImage(imageId, productId) {
        $.ajax({
            url: '/admin/deleteImage',
            method: 'DELETE',
            data: { imageNameToServer: imageId, productIdToServer: productId },
            success: ((response) => {
                if (response.status === true) {
                    window.location.reload();
                    document.getElementById('addImageButton').style.display = 'block';
                }
            })
        });
    }
</script>

<%- include("../../views/partials/admin/footer") %>