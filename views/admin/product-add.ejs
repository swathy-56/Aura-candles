<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
    </head>

    <main class="content-main">
        <div class="content-header">
            <h2 class="content-title">Add New Product</h2>
            <p class="subtitle">Create a new product listing</p>
        </div>

        <div class="card">
            <div class="card-body">
                <form method="post" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" name="productName" class="form-control" id="product_name"
                                    placeholder="Type here" />
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label for="brand" class="form-label">Brand</label>
                                <select class="form-select" name="brand" id="brand">
                                    <option value="">Select a brand</option>
                                    <% brand.forEach(b=> { %>
                                        <option value="<%= b.brandName %>">
                                            <%= b.brandName %>
                                        </option>
                                        <% }) %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label for="descriptionid" class="form-label">Description</label>
                                <textarea name="description" id="descriptionid" class="form-control" rows="4"
                                    placeholder="Type here"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="row">
                                <div class="col-6 form-group">
                                    <label class="form-label">Regular Price</label>
                                    <input name="regularPrice" type="number" step="0.01" class="form-control"
                                        placeholder="â‚¹" />
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Quantity</label>
                                <input name="quantity" type="number" class="form-control" placeholder="0" />
                                <div id="quantity-error" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Size</label>
                                <input name="size" type="text" class="form-control" placeholder="e.g., Small" />
                                <div id="size-error" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Category</label>
                                <select class="form-select" name="category" id="category">
                                    <option value="">Select a category</option>
                                    <% cat.forEach(c=> { %>
                                        <option value="<%= c.name %>">
                                            <%= c.name %>
                                        </option>
                                        <% }) %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Product Images (up to 4)</label>
                        <div class="image-upload-container">
                            <% for(let i=1; i <= 4; i++) { %>
                                <div class="image-upload">
                                    <img src="" alt="Preview" id="imgView<%= i %>" class="image-preview" />
                                    <input type="file" name="images" id="input<%= i %>" class="form-control image-input"
                                        accept="image/png,image/jpeg,image/jpg" onchange="viewImage(event, <%= i %>)" />
                                    <div class="image-cropper" id="cropper<%= i %>" style="display: none;">
                                        <div class="cropper-wrapper">
                                            <img src="" id="cropperImg<%= i %>" alt="Cropper" class="cropper-image" />
                                        </div>
                                        <div class="cropper-controls">
                                            <button type="button" id="saveButton<%= i %>" class="btn btn-sm btn-primary">Save Crop</button>
                                            <button type="button" id="cancelButton<%= i %>" class="btn btn-sm btn-secondary">Cancel</button>
                                        </div>
                                    </div>
                                </div>
                                <% } %>
                                    <div id="images-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="button" class="btn btn-primary" onclick="validateAndSubmit()">Publish</button>
                        <a href="/admin/products" class="btn btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js" integrity="sha512-JyCZjCOZoyeQZSd5+YEAcFgz2fowJ1F1hyJOXgtKu4llIa0KneLcidn5bwfutiehUTiOuK87A986BZJMko0eWQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script>
        let croppers = {};

        // Validate image file type
        function validateImageType(file) {
            const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg'];
            return file && validImageTypes.includes(file.type);
        }

        function viewImage(event, index) {
            const input = event.target;
            const file = input.files[0];
            if (!file) return;

            // Validate file type
            if (!validateImageType(file)) {
                Swal.fire('Error', 'Please select a valid image file (jpg, png, jpeg)', 'error');
                input.value = ''; // Clear the invalid file
                document.getElementById(`imgView${index}`).src = ''; // Clear preview
                return;
            }

            const reader = new FileReader();
            reader.onload = function () {
                const dataURL = reader.result;

                // Update preview image
                const previewImage = document.getElementById(`imgView${index}`);
                if (previewImage) {
                    previewImage.src = dataURL;
                    previewImage.style.display = "block";
                }

                // Initialize Cropper.js
                const cropperImage = document.getElementById(`cropperImg${index}`);
                if (cropperImage) {
                    cropperImage.src = dataURL;
                }

                // Destroy existing cropper if any
                if (croppers[index]) {
                    croppers[index].destroy();
                }

                try {
                    croppers[index] = new Cropper(cropperImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        guides: true,
                        background: false,
                        autoCropArea: 1,
                        zoomable: true,
                        ready: function () {
                            // Show cropper container
                            const cropperContainer = document.getElementById(`cropper${index}`);
                            if (cropperContainer) {
                                cropperContainer.style.display = "flex";
                            }
                        }
                    });
                } catch (error) {
                    console.error('Error initializing Cropper.js:', error);
                    Swal.fire('Error', 'Failed to initialize image cropper. Please try again.', 'error');
                    input.value = '';
                    previewImage.src = '';
                    return;
                }

                // Save cropped image
                document.getElementById(`saveButton${index}`).onclick = function () {
                    if (!croppers[index]) return;
                    const croppedCanvas = croppers[index].getCroppedCanvas({ width: 440, height: 440 });
                    if (!croppedCanvas) {
                        Swal.fire('Error', 'Failed to crop the image. Please try again.', 'error');
                        return;
                    }

                    // Update preview with cropped image
                    previewImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

                    // Create a new file for the cropped image
                    const timestamp = new Date().getTime();
                    const fileName = `cropped-img-${timestamp}-${index}.jpg`;
                    croppedCanvas.toBlob(blob => {
                        const imgFile = new File([blob], fileName, { type: "image/jpeg" });
                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(imgFile);
                        input.files = dataTransfer.files;

                        // Hide cropper and clean up
                        const cropperContainer = document.getElementById(`cropper${index}`);
                        cropperContainer.style.display = "none";
                        croppers[index].destroy();
                        delete croppers[index];
                    }, "image/jpeg", 1.0);
                };

                // Cancel cropping
                document.getElementById(`cancelButton${index}`).onclick = function () {
                    const cropperContainer = document.getElementById(`cropper${index}`);
                    cropperContainer.style.display = "none";
                    input.value = '';
                    previewImage.src = '';
                    if (croppers[index]) {
                        croppers[index].destroy();
                        delete croppers[index];
                    }
                };
            };

            reader.readAsDataURL(file);
        }

        function validateForm() {
            clearErrorMessages();
            const fields = {
                productName: document.getElementsByName('productName')[0].value.trim(),
                description: document.getElementById('descriptionid').value.trim(),
                brand: document.getElementById('brand').value,
                regularPrice: document.getElementsByName('regularPrice')[0].value,
                quantity: document.getElementsByName('quantity')[0].value,
                size: document.getElementsByName('size')[0].value.trim(),
                category: document.getElementById('category').value,
                images: Array.from(document.querySelectorAll('.image-input')).map(input => input.files[0])
            };

            let isValid = true;

            if (!fields.productName) {
                displayErrorMessage('productName-error', 'Please enter a product name');
                isValid = false;
            }
            if (!fields.description) {
                displayErrorMessage('description-error', 'Please enter a description');
                isValid = false;
            }
            if (!fields.brand) {
                displayErrorMessage('brand-error', 'Please select a brand');
                isValid = false;
            }
            if (!fields.category) {
                displayErrorMessage('category-error', 'Please select a category');
                isValid = false;
            }
            if (!fields.regularPrice || isNaN(fields.regularPrice) || parseFloat(fields.regularPrice) < 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid regular price');
                isValid = false;
            }
            if (!fields.quantity || isNaN(fields.quantity) || parseInt(fields.quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid quantity');
                isValid = false;
            }
            if (!fields.size) {
                displayErrorMessage('size-error', 'Please enter a size');
                isValid = false;
            }
            if (!fields.images.some(file => file)) {
                displayErrorMessage('images-error', 'Please upload at least one image');
                isValid = false;
            } else {
                fields.images.forEach((file, index) => {
                    if (file && !validateImageType(file)) {
                        displayErrorMessage('images-error', `Image ${index + 1} must be a valid image file (jpg, png, jpeg)`);
                        isValid = false;
                    }
                });
            }

            return isValid;
        }

        function validateAndSubmit() {
            if (validateForm()) {
                const form = document.getElementById('productForm');
                const formData = new FormData(form);

                fetch('/admin/addProducts', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status) {
                            Swal.fire('Success', data.message, 'success').then(() => {
                                window.location.href = '/admin/addProducts';
                            });
                        } else {
                            Swal.fire('Error', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error', 'An error occurred while adding the product', 'error');
                        console.error(error);
                    });
            }
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        function clearErrorMessages() {
            document.querySelectorAll('.error-message').forEach(element => {
                element.textContent = '';
                element.style.display = 'none';
            });
        }
    </script>

    <style>
        :root {
            --primary: #3498db;
            --secondary: #b0d5de;
            --hover: #2980b9;
            --text-dark: #2c3e50;
            --text-light: #ffffff;
        }

        .content-main {
            padding: 2rem;
            background: #f5f6fa;
            min-height: calc(100vh - 120px);
        }

        .content-header {
            background: var(--primary);
            padding: 1.5rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            color: var(--text-light);
            text-align: center;
        }

        .content-title {
            font-size: 2rem;
            margin: 0;
            font-weight: 700;
        }

        .subtitle {
            font-size: 1rem;
            opacity: 0.9;
        }

        .card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }

        .card-body {
            padding: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            color: var(--text-dark);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .form-control,
        .form-select {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px 15px;
            transition: all 0.3s;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 10px rgba(52, 152, 219, 0.2);
        }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        .image-upload-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .image-upload {
            text-align: center;
        }

        .image-preview {
            width: 100%;
            max-height: 150px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 0.5rem;
        }

        .image-cropper {
            display: none;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            margin-top: 0.5rem;
            background: #fff;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .cropper-wrapper {
            max-width: 400px;
            width: 100%;
        }

        .cropper-image {
            max-width: 100%;
            display: block;
        }

        .cropper-controls {
            display: flex;
            gap: 0.5rem;
        }

        .error-message {
            color: #e74c3c;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        .btn {
            padding: 12px 20px;
            border-radius: 8px;
            transition: all 0.3s;
            border: none;
        }

        .btn-primary {
            background: var(--primary);
            color: var(--text-light);
        }

        .btn-primary:hover {
            background: var(--hover);
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #b0d5de;
            color: var(--text-dark);
        }

        .btn-secondary:hover {
            background: #9ac3cc;
            transform: translateY(-2px);
        }

        @media (max-width: 576px) {
            .cropper-wrapper {
                max-width: 100%;
            }
        }
    </style>